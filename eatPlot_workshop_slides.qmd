---
title: "Einführung in eatPlot"
author: "Nicklas Hafiz"
title-slide-attributes:
  data-background-image: ./images/eatPlot.svg
  data-background-size: 30%
  data-background-repeat: no-repeat
  data-background-position: bottom 30px center
  data-background-opacity: "0"
format: 
  letterbox-revealjs:
    embed-resources: false
    theme: styles.scss
    highlight-style: dark.theme
    code-link: true
    code-line-numbers: false
execute:
  echo: true
callout-appearance: simple
lang: de
categories: [eatPlot, tutorial, slides, intro]
image: ./images/eatPlot.svg
---

## Zu diesen Folien

HTML-Folien können durch tippen von `e` in PDF umgewandelt werden, und dann mit Drucken aus dem Browser abgespeichert werden, falls ihr darin kommentieren wollt.

![](./images/print_html.PNG)

##  {background-image="images/map.jpg" background-size="1225px"}

::: {.absolute left="10%" right="10%" top="7.5%" style="font-size:1em; padding: 0.5em 0.5em; background-color: rgba(255, 255, 255, .7); backdrop-filter: blur(5px); box-shadow: 0 0 1rem 0 rgba(255, 255, 255, .5); border-radius: 10px"}

**Roadmap**

1. Einführung
1. Allgemeiner Workflow
1. Linienplots
1. Tabellen/Barplots
:::

## eatPlot

```{r}
#| eval: false
# install.packages("devtools")
devtools::install_github("nickhaf/eatPlot")
```

```{r}
library(eatPlot)
```


- Automatisieren der Grafikerstellung für eatRep-Output
- BT-Grafiken!

:::{.callout-important}
Das Paket befindet sich noch in Entwicklung. Falls euch Bugs auffallen, bitte Melden! Ich kümmere mich schnellstmöglich drum. 
:::


## Vorteile

- Schneller Zugang zu komplexen BT-Visualisierungen und Tabellen
- Vereinheitlichung der BT-Plots
- Leichtes Updaten bei Änderungen in den Plots und/oder Daten
- Nachvollziehbarkeit/Version Control
- Weniger Checks nötig, da Werte automatisch eingelesen werden

## Nachteile

- Gerade zu Beginn etwas mehr Arbeit für Kapitelautor*innen 
  - Aber: "Plug-and-Play"-Vorlagen, weniger Überarbeitungsschleifen und Kontrollen

## Vorlagen

Vignetten, Tutorials sowie Vorlagen zur Erstellung finden sich auf der [Webseite](https://nickhaf.github.io/eatPlot/)



# Allgemeiner Workflow

## Datenformat

```{r}
str(trend_3)
```


## Datenaufbereitung

Es gibt zwei Prep-Funktionen:

```{r}
lineplot_prepped <- prep_lineplot(trend_3, subgroup_var = "mhg")
```

```{r}
tableplot_prepped <- prep_tablebarplot(trend_3, subgroup_var = "mhg")
```

## Datenaufbereitung
```{r}
str(lineplot_prepped)
```


## Datenaufbereitung
```{r}
str(tableplot_prepped)
```



## Ploterstellung

## Bonus: Plot_settings



# Linienplots


## Datenaufbereitung

:::{.callout-warning}

Bitte lest die Daten aus dem `eatRep`-Workshop ein:

```{r}
#| eval: false
trend_dat <- readRDS("I:/Methoden/02_IQB-interne_eat_Workshops/eatRep_2024/Beispieloutputs/04_meansAufbereitet.rds")

```

:::


## Datenaufbereitung
```{r}
#| eval: false
trend_p <- prep_lineplot(
  trend_dat
)

trend_p$TR_BUNDESLAND <- gsub("([a-z])([A-Z])", "\\1-\\2", trend_p$TR_BUNDESLAND)
trend_p$TR_BUNDESLAND <- gsub("ue", "ü", trend_p$TR_BUNDESLAND)

```


## Plot-Erstellung

```{r}
#| eval: FALSE


lineplot_1_w <- plot_lineplot(
  trend_p,
  years_lines = list(c(2009, 2015), c(2015, 2022)),
  years_braces = list(c(2009, 2015), c(2015, 2022)),
  box_facet = "Berlin",
  background_subgroup = "total",
  title_superscripts = list(
    "Bayern" = "a",
    "Thüringen" = "3"),
  plot_settings = plotsettings_lineplot(default_list = lineplot_4x4)
)
```

## Abspeichern

```{r save lineplot_1_group_w}
#| eval: false
save_plot(lineplot_1_w, filename = "C:/Users/hafiznij/Downloads/lineplot_1_group_workshop.pdf")
```

## Plot-Settings

## Mehrere Kompetenzbereiche

```{r}
#| eval: false
#| 
plot_my_lineplot <- function(plot_dat){

lineplot_1_w <- plot_lineplot(
  trend_p,
  years_lines = list(c(2009, 2015), c(2015, 2022)),
  years_braces = list(c(2009, 2015), c(2015, 2022)),
  box_facet = "Berlin",
  background_subgroup = "total",
  title_superscripts = list(
    "Bayern" = "a",
    "Thüringen" = "3"),
  plot_settings = plotsettings_lineplot(default_list = lineplot_4x4)
)

}
```

```{r}
#| eval: false

plots_6.6 <- lapply(eatRep_kb_list, plot_my_lineplot )
```

# Tabellen/Barplots

## Datenaufbereitung
:::{.callout-warning}

Bitte lest die Daten aus dem `eatRep`-Workshop ein:

```{r}
#| eval: false
trend_dat_geschlecht <- readRDS("I:/Methoden/02_IQB-interne_eat_Workshops/eatRep_2024/Beispieloutputs/disp_geschlecht.rds")

```

:::

## Datenaufbereitung
```{r}
#| eval: false

mw_sub <- trend_mw

dat_prepped <- prep_tablebarplot(
  trend_dat_geschlecht,
  subgroup_var = "Kgender",
  par = c("mean", "sd"),
  facet_var = "TR_BUNDESLAND",
  total_facet = "total",
  comparisons = c("none", "trend", "trend_crossDiff")
)
```


```{r}
#| eval: false

dat_prepped <- subset(dat_prepped, Kgender %in% c("maennlich", "weiblich"))
dat_prepped$Kgender <- gsub("maennlich", "Jungen", dat_prepped$Kgender)
dat_prepped$Kgender <- gsub("weiblich", "Mädchen", dat_prepped$Kgender)

dat_prepped_a <- dat_prepped[order(dat_prepped$TR_BUNDESLAND), ]

dat_prepped_a$TR_BUNDESLAND[duplicated(dat_prepped_a$TR_BUNDESLAND)] <- " "
dat_prepped_a$TR_BUNDESLAND <- gsub("total", "Deutschland", dat_prepped_a$TR_BUNDESLAND)
dat_prepped_a$TR_BUNDESLAND <- gsub("ue", "ü", dat_prepped_a$TR_BUNDESLAND)


column_widths_stand <- standardize_column_width(
  column_widths = list(
    p1 = c(0.1, rep(0.04, 7), 0.05, rep(0.04, 2), NA),
    p2 = c(0.05, rep(0.04, 2), NA)
  ),
  plot_ranges = c(60, 45) # Range of the x-axes of both plots set in 'axis_x_lims'.
)
```


```{r}
#| eval: false
p_1 <- plot_tablebarplot(
  dat = dat_prepped_a,
  bar_est = "est_2015 - 2009_trend_mean",
  bar_label = NULL,
  bar_sig = "sig_2015 - 2009_trend_mean",
  bar_fill = "Kgender",
  y_axis = "y_axis",
  column_spanners = list(
    "**2009**<sup>a</sup>" = c(3, 4),
    "**2015**<sup>a</sup>" = c(5, 6),
    "**2022**<sup>a</sup>" = c(7, 8),
    "**Differenz 2015-2009<sup>a</sup>**" = c(9, 12)
  ),
  columns_table_se = list(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, "se_2015 - 2009_trend_mean", NULL),
  headers = list(
    "**Land**",
    " ",
    "*M*",
    "*SD*",
    "*M*",
    "*SD*",
    "*M*",
    "*SD*",
    "*M<sub>2015</sub> - M<sub>2009</sub>*",
    "*(SE)*",
    "*d*",
    " "
  ),
  columns_table = c(
    "TR_BUNDESLAND",
    "Kgender",
    "est_2009_none_mean",
    "est_2009_none_sd",
    "est_2015_none_mean",
    "est_2015_none_sd",
    "est_2022_none_mean",
    "est_2022_none_sd",
    "est_2015 - 2009_trend_mean",
    "se_2015 - 2009_trend_mean",
    "es_2015 - 2009_trend_mean"
  ),
  columns_table_sig_bold = list(
    NULL,
    NULL,
    "sig_2009_none_mean",
    NULL,
    "sig_2015_none_mean",
    NULL,
    "sig_2022_none_mean",
    NULL,
    "sig_2015 - 2009_trend_mean",
    NULL,
    "sig_2015 - 2009_trend_mean"
  ),
  columns_table_sig_superscript = list(
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    "sig_2015 - 2009_trend_crossDiffTotal_mean",
    NULL,
    NULL
  ),
  columns_round = c(rep(0, 10), 2),
  plot_settings = plotsettings_tablebarplot(
    axis_x_lims = c(-30, 30),
    background_stripes_colour = c(rep(c("white", "white", "#EBFDF3", "#EBFDF3"), 8), "grey", "grey"),
    bar_fill_colour = c("#20D479", "#8DEBBC"),
    bar_background_lines = "scale_breaks",
    bar_background_lines_linetype = "dotted",
    bar_pattern_spacing = 0.0154,
    columns_alignment = c(0, 0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 2, 0.5, 2),
    columns_width = column_widths_stand$p1,
    headers_alignment = c(0, 0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0),
    default_list = barplot_table_plot_pattern
  )
)

p_2 <- plot_tablebarplot(
  dat = dat_prepped_a,
  bar_est = "est_2022 - 2015_trend_mean",
  bar_label = NULL,
  bar_sig = "sig_2022 - 2015_trend_mean",
  bar_fill = "Kgender",
  column_spanners = list(
    "**Differenz 2022-2015**" = c(1, 4)
  ),
  headers = list(
    "*M<sub>2022</sub> - M<sub>2015</sub>*",
    "*(SE)*",
    "*d*",
    " "
  ),
  columns_table = c(
    "est_2022 - 2015_trend_mean",
    "se_2022 - 2015_trend_mean",
    "es_2022 - 2015_trend_mean"
  ),
  columns_table_se = list(NULL, "se_2022 - 2015_trend_mean", NULL),
  columns_table_sig_bold = list(
    "sig_2022 - 2015_trend_mean",
    NULL,
    "sig_2022 - 2015_trend_mean"
  ),
  columns_table_sig_superscript = list(
    "sig_2022 - 2015_trend_crossDiffTotal_mean",
    NULL,
    NULL
  ),
  y_axis = "y_axis",
  columns_round = c(0, 0, 2),
  plot_settings = plotsettings_tablebarplot(
    axis_x_lims = c(-40, 5),
    bar_background_lines = "scale_breaks",
    bar_background_lines_linetype = "dotted",
    background_stripes_colour = c(rep(c("white", "white", "#EBFDF3", "#EBFDF3"), 8), "grey", "grey"),
    bar_fill_colour = c("#20D479", "#8DEBBC"),
    bar_pattern_spacing = 0.0346,
    columns_alignment = c(rep(0.5, 2), 2),
    columns_width = column_widths_stand$p2,
    headers_alignment = c(0.5, 0.5, 0.5, 0),
    default_list = barplot_table_plot_pattern
  )
)

bar_pattern_spacing_stand <- standardize_pattern_spacing(list(p_1, p_2), pattern_spacing = 0.05)
```

```{r}
#| eval: false
tableplot_6.6 <- combine_plots(list(p_1, p_2))
```


```{r}
#| eval: false
save_plot(tableplot_6.6, filename = "C:/Users/hafiznij/Downloads/abb6_6_workshop.pdf", width = 320)

```


## Plot-Erstellung

## Plot-Settings


## Schleife

```{r}
#| eval: false
#| 
my_plot_6.6 <- function(plot_dat){
  ## Plot-Erstellung hier rein
  p_1 <- plot_tablebarplot(
  dat = plot_dat
  ## , ...
  )
}
```

```{r}
#| eval: false
plots_6.6 <- lapply(eatRep_kb_list, my_plot_6.6 )
```

